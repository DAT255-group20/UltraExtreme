/* ============================================================
 * Copyright 2012 Bjorn Persson Mattsson, Johan Gronvall, Daniel Jonsson,
 * Viktor Anderling
 *
 * This file is part of UltraExtreme.
 *
 * UltraExtreme is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * UltraExtreme is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with UltraExtreme. If not, see <http://www.gnu.org/licenses/>.
 * ============================================================ */

package ultraextreme.model.util;

import javax.vecmath.Vector2d;

/**
 * This immutable class defines a rotation in which an entity may move.
 * 
 * @author Viktor Anderling
 * 
 */
public class Rotation {

	/**
	 * The angle measured in radians. As it gets larger it will turn
	 * counterclockwise.
	 */
	private final double angle;

	/**
	 * Creates a direction with the chosen angle.
	 * 
	 * @param angle
	 *            The chosen angle.
	 */
	public Rotation(final double angle) {
		this.angle = angle;
	}

	/**
	 * @return The angle of the direction.
	 */
	public double getAngle() {
		return angle;
	}

	/**
	 * Gets the coordinates rotated by the angle. If the angle is 0, the same
	 * coordinates as the input will be returned.
	 * 
	 * @param x
	 *            The x-value of the coordinate.
	 * @param y
	 *            The y-value of the coordinate.
	 * 
	 * @return The rotated form of the coordinate counterclockwise.
	 */
	public Vector2d getRotatedCoordinates(final double x, final double y) {
		return new Vector2d(x * Math.cos(angle) - y * Math.sin(angle), x
				* Math.sin(angle) + y * Math.cos(angle));
	}

	@Override
	public int hashCode() {
		// Generated by Eclipse
		final int prime = 137;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(angle);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		// Generated by Eclipse
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Rotation other = (Rotation) obj;
		if (Double.doubleToLongBits(angle) != Double
				.doubleToLongBits(other.angle)) {
			return false;
		}
		return true;
	}
}